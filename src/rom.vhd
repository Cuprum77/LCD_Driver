--------------------------------------------------------------------------
--! @file rom.vhd
--! @brief Contains the instruction data and payload data for the sequencer.vhd
--! @author Cuprum https://github.com/Cuprum77
--! @date 2024-01-27
--! @version 1.0
--! @note This file was generated by the rom_generator.py script.
--------------------------------------------------------------------------

--! Use standard library
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity ROM is
  port(
    clk         : in  std_logic;  --! Clock signal
    rst         : in  std_logic;  --! Reset signal, asynchronous
    address     : in  std_logic_vector(7 downto 0);  --! Address of the ROM
    instruction : out std_logic_vector(7 downto 0);  --! Instruction data
    data        : out std_logic_vector(31 downto 0); --! Payload data
    size        : out std_logic_vector(7 downto 0)   --! Size of the ROM, constant
  );
end entity;

--! @brief ROM architecture
--! @details The ROM architecture handles the output of the instructions and payload data.
architecture rtl of rom is
--! Set the ROM size constant (auto-generated)
--! @note This constant is used to determine the size of the ROM in the sequencer.vhd
constant rom_size : integer := 231;

--! Create the ROM types for the instruction and payload data
--! Note that the instruction data is 8 bits, and the payload data is 32 bits
type rom_8b_t is array(0 to rom_size) of std_logic_vector(7 downto 0);
type rom_32b_t is array(0 to rom_size) of std_logic_vector(31 downto 0);

--! The Instruction data
constant instruction_rom : rom_8b_t := (
    x"10", x"21", x"21", x"21", x"21", x"21", x"10", x"21",
    x"10", x"21", x"21", x"21", x"21", x"21", x"10", x"21",
    x"21", x"10", x"21", x"21", x"10", x"21", x"21", x"10",
    x"21", x"10", x"21", x"21", x"21", x"21", x"21", x"21",
    x"21", x"21", x"21", x"21", x"21", x"21", x"21", x"21",
    x"21", x"21", x"10", x"21", x"21", x"21", x"21", x"21",
    x"21", x"21", x"21", x"21", x"21", x"21", x"21", x"21",
    x"21", x"21", x"21", x"10", x"21", x"21", x"21", x"21",
    x"21", x"10", x"21", x"10", x"21", x"10", x"21", x"10",
    x"21", x"10", x"21", x"10", x"21", x"10", x"21", x"10",
    x"21", x"21", x"10", x"21", x"10", x"21", x"10", x"21",
    x"10", x"21", x"10", x"21", x"21", x"21", x"21", x"21",
    x"21", x"10", x"21", x"21", x"21", x"21", x"21", x"21",
    x"21", x"21", x"21", x"21", x"21", x"10", x"21", x"21",
    x"21", x"21", x"21", x"21", x"21", x"21", x"21", x"21",
    x"21", x"21", x"10", x"21", x"21", x"21", x"21", x"10",
    x"21", x"21", x"10", x"21", x"21", x"21", x"21", x"21",
    x"21", x"21", x"21", x"21", x"21", x"21", x"21", x"21",
    x"21", x"21", x"21", x"10", x"21", x"21", x"21", x"21",
    x"10", x"21", x"21", x"10", x"21", x"21", x"21", x"21",
    x"21", x"21", x"21", x"21", x"21", x"21", x"21", x"21",
    x"21", x"21", x"21", x"21", x"10", x"21", x"21", x"21",
    x"21", x"21", x"21", x"10", x"21", x"21", x"21", x"21",
    x"21", x"21", x"21", x"21", x"21", x"21", x"21", x"21",
    x"21", x"21", x"21", x"21", x"10", x"21", x"21", x"21",
    x"21", x"21", x"21", x"10", x"21", x"21", x"21", x"21",
    x"21", x"10", x"21", x"21", x"10", x"21", x"21", x"10",
    x"21", x"21", x"10", x"21", x"21", x"21", x"21", x"21",
    x"10", x"21", x"10", x"21", x"10", x"21", x"10", x"10"
  );
  --! The payload data
  constant payload_rom : rom_32b_t := (
    x"000000ff", x"00000077", x"00000001", x"00000000",
    x"00000000", x"00000013", x"000000ef", x"00000008",
    x"000000ff", x"00000077", x"00000001", x"00000000",
    x"00000000", x"00000010", x"000000c0", x"00000077",
    x"00000000", x"000000c1", x"0000000e", x"0000000c",
    x"000000c2", x"00000007", x"00000002", x"000000cc",
    x"00000030", x"000000b0", x"00000000", x"00000017",
    x"0000001f", x"0000000e", x"00000011", x"00000006",
    x"0000000d", x"00000008", x"00000007", x"00000026",
    x"00000003", x"00000011", x"0000000f", x"0000002a",
    x"00000031", x"0000001c", x"000000b1", x"00000000",
    x"00000017", x"0000001f", x"0000000d", x"00000011",
    x"00000007", x"0000000c", x"00000008", x"00000008",
    x"00000026", x"00000004", x"00000011", x"0000000f",
    x"0000002a", x"00000031", x"0000001c", x"000000ff",
    x"00000077", x"00000001", x"00000000", x"00000000",
    x"00000011", x"000000b0", x"0000005c", x"000000b1",
    x"00000068", x"000000b2", x"00000085", x"000000b3",
    x"00000080", x"000000b5", x"00000049", x"000000b7",
    x"00000087", x"000000b8", x"00000022", x"000000b9",
    x"00000010", x"0000001f", x"000000bb", x"00000003",
    x"000000c1", x"00000088", x"000000c2", x"00000088",
    x"000000d0", x"00000088", x"000000e0", x"00000000",
    x"00000000", x"00000002", x"00000000", x"00000000",
    x"0000000c", x"000000e1", x"00000003", x"00000096",
    x"00000005", x"00000096", x"00000002", x"00000096",
    x"00000004", x"00000096", x"00000000", x"00000044",
    x"00000044", x"000000e2", x"00000000", x"00000000",
    x"00000003", x"00000003", x"00000000", x"00000000",
    x"00000002", x"00000000", x"00000000", x"00000000",
    x"00000002", x"00000000", x"000000e3", x"00000000",
    x"00000000", x"00000033", x"00000033", x"000000e4",
    x"00000044", x"00000044", x"000000e5", x"0000000b",
    x"000000d4", x"00000028", x"0000008c", x"0000000d",
    x"000000d6", x"00000028", x"0000008c", x"00000007",
    x"000000d0", x"00000028", x"0000008c", x"00000009",
    x"000000d2", x"00000028", x"0000008c", x"000000e6",
    x"00000000", x"00000000", x"00000033", x"00000033",
    x"000000e7", x"00000044", x"00000044", x"000000e8",
    x"0000000a", x"000000d5", x"00000028", x"0000008c",
    x"0000000c", x"000000d7", x"00000028", x"0000008c",
    x"00000006", x"000000d1", x"00000028", x"0000008c",
    x"00000008", x"000000d3", x"00000028", x"0000008c",
    x"000000eb", x"00000000", x"00000001", x"000000e4",
    x"000000e4", x"00000044", x"00000000", x"000000ed",
    x"000000ff", x"00000045", x"00000067", x"000000fc",
    x"00000001", x"0000003f", x"000000ab", x"000000ff",
    x"000000ff", x"000000ba", x"000000f3", x"00000010",
    x"000000cf", x"00000076", x"00000054", x"000000ff",
    x"000000ef", x"00000010", x"0000000d", x"00000004",
    x"00000008", x"0000003f", x"0000001f", x"000000ff",
    x"00000077", x"00000001", x"00000000", x"00000000",
    x"00000013", x"000000e8", x"00000000", x"0000000e",
    x"000000e8", x"00000000", x"0000000c", x"000000e8",
    x"00000040", x"00000000", x"000000ff", x"00000077",
    x"00000001", x"00000000", x"00000000", x"00000000",
    x"0000003a", x"00000060", x"00000036", x"00000000",
    x"00000035", x"00000000", x"00000011", x"00000029"
  );
begin
  --! Assign the size of the ROM to the size output
  size <= std_logic_vector(to_unsigned(rom_size, 8));

  --! The ROM is synchronous, so it needs to be clocked
  rom_process : process(clk)
  begin
    if rst = '1' then
      -- Output nothing
      instruction <= (others => '0');
      data        <= (others => '0');
    elsif rising_edge(clk) then
      --! Handle the possibility of an invalid address
      if address > to_unsigned(rom_size, 8) then
        instruction <= (others => '0');
        data        <= (others => '0');
      else
        instruction <= instruction_rom(to_integer(unsigned(address)));
        data        <= payload_rom(to_integer(unsigned(address)));
      end if;
    end if;
  end process rom_process;
end architecture rtl;